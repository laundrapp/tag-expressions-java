//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/tag-expressions-java/src/main/java/io/cucumber/tagexpressions/TagExpressionParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/tagexpressions/Expression.h"
#include "io/cucumber/tagexpressions/TagExpressionException.h"
#include "io/cucumber/tagexpressions/TagExpressionParser.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Deque.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@class IoCucumberTagexpressionsTagExpressionParser_Assoc;
@class IoCucumberTagexpressionsTagExpressionParser_TokenType;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline id<JavaUtilMap> IoCucumberTagexpressionsTagExpressionParser_get_ASSOC(void);
inline id<JavaUtilMap> IoCucumberTagexpressionsTagExpressionParser_set_ASSOC(id<JavaUtilMap> value);
static id<JavaUtilMap> IoCucumberTagexpressionsTagExpressionParser_ASSOC;
J2OBJC_STATIC_FIELD_OBJ(IoCucumberTagexpressionsTagExpressionParser, ASSOC, id<JavaUtilMap>)

inline id<JavaUtilMap> IoCucumberTagexpressionsTagExpressionParser_get_PREC(void);
inline id<JavaUtilMap> IoCucumberTagexpressionsTagExpressionParser_set_PREC(id<JavaUtilMap> value);
static id<JavaUtilMap> IoCucumberTagexpressionsTagExpressionParser_PREC;
J2OBJC_STATIC_FIELD_OBJ(IoCucumberTagexpressionsTagExpressionParser, PREC, id<JavaUtilMap>)

inline jchar IoCucumberTagexpressionsTagExpressionParser_get_ESCAPING_CHAR(void);
#define IoCucumberTagexpressionsTagExpressionParser_ESCAPING_CHAR '\\'
J2OBJC_STATIC_FIELD_CONSTANT(IoCucumberTagexpressionsTagExpressionParser, ESCAPING_CHAR, jchar)

__attribute__((unused)) static id<JavaUtilList> IoCucumberTagexpressionsTagExpressionParser_tokenizeWithNSString_(NSString *expr);

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(IoCucumberTagexpressionsTagExpressionParser *self, IoCucumberTagexpressionsTagExpressionParser_TokenType *expectedTokenType, IoCucumberTagexpressionsTagExpressionParser_TokenType *tokenType);

__attribute__((unused)) static id IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(IoCucumberTagexpressionsTagExpressionParser *self, id<JavaUtilDeque> stack);

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_pushExprWithNSString_withJavaUtilDeque_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token, id<JavaUtilDeque> stack);

__attribute__((unused)) static jboolean IoCucumberTagexpressionsTagExpressionParser_isUnaryWithNSString_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token);

__attribute__((unused)) static jboolean IoCucumberTagexpressionsTagExpressionParser_isBinaryWithNSString_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token);

__attribute__((unused)) static jboolean IoCucumberTagexpressionsTagExpressionParser_isOperatorWithNSString_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token);

@interface IoCucumberTagexpressionsTagExpressionParser_1 : JavaUtilHashMap

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)computeIfAbsentWithId:(NSString *)arg0
                                                withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)getWithId:(id)arg0;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)removeWithId:(id)arg0;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)putIfAbsentWithId:(NSString *)arg0
                                                                  withId:(IoCucumberTagexpressionsTagExpressionParser_Assoc *)arg1;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)computeIfPresentWithId:(NSString *)arg0
                                               withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)replaceWithId:(NSString *)arg0
                                                              withId:(IoCucumberTagexpressionsTagExpressionParser_Assoc *)arg1;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)putWithId:(NSString *)arg0
                                                          withId:(IoCucumberTagexpressionsTagExpressionParser_Assoc *)arg1;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)computeWithId:(NSString *)arg0
                                      withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)mergeWithId:(NSString *)arg0
                                                            withId:(IoCucumberTagexpressionsTagExpressionParser_Assoc *)arg1
                                    withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (IoCucumberTagexpressionsTagExpressionParser_Assoc *)getOrDefaultWithId:(id)arg0
                                                                   withId:(IoCucumberTagexpressionsTagExpressionParser_Assoc *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_1)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_1_init(IoCucumberTagexpressionsTagExpressionParser_1 *self);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_1 *new_IoCucumberTagexpressionsTagExpressionParser_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_1 *create_IoCucumberTagexpressionsTagExpressionParser_1_init(void);

@interface IoCucumberTagexpressionsTagExpressionParser_2 : JavaUtilHashMap

- (JavaLangInteger *)computeIfAbsentWithId:(NSString *)arg0
              withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (JavaLangInteger *)getWithId:(id)arg0;

- (JavaLangInteger *)removeWithId:(id)arg0;

- (JavaLangInteger *)putIfAbsentWithId:(NSString *)arg0
                                withId:(JavaLangInteger *)arg1;

- (JavaLangInteger *)computeIfPresentWithId:(NSString *)arg0
             withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (JavaLangInteger *)replaceWithId:(NSString *)arg0
                            withId:(JavaLangInteger *)arg1;

- (JavaLangInteger *)putWithId:(NSString *)arg0
                        withId:(JavaLangInteger *)arg1;

- (JavaLangInteger *)computeWithId:(NSString *)arg0
    withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (JavaLangInteger *)mergeWithId:(NSString *)arg0
                          withId:(JavaLangInteger *)arg1
  withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (JavaLangInteger *)getOrDefaultWithId:(id)arg0
                                 withId:(JavaLangInteger *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_2)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_2_init(IoCucumberTagexpressionsTagExpressionParser_2 *self);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_2 *new_IoCucumberTagexpressionsTagExpressionParser_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_2 *create_IoCucumberTagexpressionsTagExpressionParser_2_init(void);

typedef NS_ENUM(NSUInteger, IoCucumberTagexpressionsTagExpressionParser_TokenType_Enum) {
  IoCucumberTagexpressionsTagExpressionParser_TokenType_Enum_OPERAND = 0,
  IoCucumberTagexpressionsTagExpressionParser_TokenType_Enum_OPERATOR = 1,
};

@interface IoCucumberTagexpressionsTagExpressionParser_TokenType : JavaLangEnum

@end

J2OBJC_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_TokenType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_values_[];

inline IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_get_OPERAND(void);
J2OBJC_ENUM_CONSTANT(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND)

inline IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_get_OPERATOR(void);
J2OBJC_ENUM_CONSTANT(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERATOR)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_TokenType_initWithNSString_withInt_(IoCucumberTagexpressionsTagExpressionParser_TokenType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *IoCucumberTagexpressionsTagExpressionParser_TokenType_values(void);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_TokenType)

typedef NS_ENUM(NSUInteger, IoCucumberTagexpressionsTagExpressionParser_Assoc_Enum) {
  IoCucumberTagexpressionsTagExpressionParser_Assoc_Enum_LEFT = 0,
  IoCucumberTagexpressionsTagExpressionParser_Assoc_Enum_RIGHT = 1,
};

@interface IoCucumberTagexpressionsTagExpressionParser_Assoc : JavaLangEnum

@end

J2OBJC_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_Assoc)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_values_[];

inline IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_get_LEFT(void);
J2OBJC_ENUM_CONSTANT(IoCucumberTagexpressionsTagExpressionParser_Assoc, LEFT)

inline IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_get_RIGHT(void);
J2OBJC_ENUM_CONSTANT(IoCucumberTagexpressionsTagExpressionParser_Assoc, RIGHT)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_Assoc_initWithNSString_withInt_(IoCucumberTagexpressionsTagExpressionParser_Assoc *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *IoCucumberTagexpressionsTagExpressionParser_Assoc_values(void);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_Assoc)

@interface IoCucumberTagexpressionsTagExpressionParser_Literal : NSObject < IoCucumberTagexpressionsExpression > {
 @public
  NSString *value_;
}

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_Literal)

J2OBJC_FIELD_SETTER(IoCucumberTagexpressionsTagExpressionParser_Literal, value_, NSString *)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(IoCucumberTagexpressionsTagExpressionParser_Literal *self, IoCucumberTagexpressionsTagExpressionParser *outer$, NSString *value);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Literal *new_IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(IoCucumberTagexpressionsTagExpressionParser *outer$, NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Literal *create_IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(IoCucumberTagexpressionsTagExpressionParser *outer$, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_Literal)

@interface IoCucumberTagexpressionsTagExpressionParser_Or : NSObject < IoCucumberTagexpressionsExpression > {
 @public
  id<IoCucumberTagexpressionsExpression> left_;
  id<IoCucumberTagexpressionsExpression> right_;
}

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_Or)

J2OBJC_FIELD_SETTER(IoCucumberTagexpressionsTagExpressionParser_Or, left_, id<IoCucumberTagexpressionsExpression>)
J2OBJC_FIELD_SETTER(IoCucumberTagexpressionsTagExpressionParser_Or, right_, id<IoCucumberTagexpressionsExpression>)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser_Or *self, IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Or *new_IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Or *create_IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_Or)

@interface IoCucumberTagexpressionsTagExpressionParser_And : NSObject < IoCucumberTagexpressionsExpression > {
 @public
  id<IoCucumberTagexpressionsExpression> left_;
  id<IoCucumberTagexpressionsExpression> right_;
}

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_And)

J2OBJC_FIELD_SETTER(IoCucumberTagexpressionsTagExpressionParser_And, left_, id<IoCucumberTagexpressionsExpression>)
J2OBJC_FIELD_SETTER(IoCucumberTagexpressionsTagExpressionParser_And, right_, id<IoCucumberTagexpressionsExpression>)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser_And *self, IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_And *new_IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_And *create_IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_And)

@interface IoCucumberTagexpressionsTagExpressionParser_Not : NSObject < IoCucumberTagexpressionsExpression > {
 @public
  id<IoCucumberTagexpressionsExpression> expr_;
}

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_Not)

J2OBJC_FIELD_SETTER(IoCucumberTagexpressionsTagExpressionParser_Not, expr_, id<IoCucumberTagexpressionsExpression>)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser_Not *self, IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> expr);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Not *new_IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> expr) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_Not *create_IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> expr);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_Not)

@interface IoCucumberTagexpressionsTagExpressionParser_True : NSObject < IoCucumberTagexpressionsExpression >

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberTagexpressionsTagExpressionParser_True)

__attribute__((unused)) static void IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(IoCucumberTagexpressionsTagExpressionParser_True *self, IoCucumberTagexpressionsTagExpressionParser *outer$);

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_True *new_IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(IoCucumberTagexpressionsTagExpressionParser *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberTagexpressionsTagExpressionParser_True *create_IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(IoCucumberTagexpressionsTagExpressionParser *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberTagexpressionsTagExpressionParser_True)

J2OBJC_INITIALIZED_DEFN(IoCucumberTagexpressionsTagExpressionParser)

@implementation IoCucumberTagexpressionsTagExpressionParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoCucumberTagexpressionsTagExpressionParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<IoCucumberTagexpressionsExpression>)parseWithNSString:(NSString *)infix {
  id<JavaUtilList> tokens = IoCucumberTagexpressionsTagExpressionParser_tokenizeWithNSString_(infix);
  if ([((id<JavaUtilList>) nil_chk(tokens)) isEmpty]) return create_IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(self);
  id<JavaUtilDeque> operators = create_JavaUtilArrayDeque_init();
  id<JavaUtilDeque> expressions = create_JavaUtilArrayDeque_init();
  IoCucumberTagexpressionsTagExpressionParser_TokenType *expectedTokenType = JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND);
  for (NSString * __strong token in tokens) {
    if (IoCucumberTagexpressionsTagExpressionParser_isUnaryWithNSString_(self, token)) {
      IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(self, expectedTokenType, JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND));
      [operators pushWithId:token];
      expectedTokenType = JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND);
    }
    else if (IoCucumberTagexpressionsTagExpressionParser_isBinaryWithNSString_(self, token)) {
      IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(self, expectedTokenType, JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERATOR));
      while ([operators size] > 0 && IoCucumberTagexpressionsTagExpressionParser_isOperatorWithNSString_(self, [operators peek]) && (([((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_ASSOC)) getWithId:token] == JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_Assoc, LEFT) && [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_PREC)) getWithId:token])) intValue] <= [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_PREC)) getWithId:[operators peek]])) intValue]) || ([((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_ASSOC)) getWithId:token] == JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_Assoc, RIGHT) && [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_PREC)) getWithId:token])) intValue] < [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_PREC)) getWithId:[operators peek]])) intValue]))) {
        IoCucumberTagexpressionsTagExpressionParser_pushExprWithNSString_withJavaUtilDeque_(self, IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, operators), expressions);
      }
      [operators pushWithId:token];
      expectedTokenType = JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND);
    }
    else if ([@"(" isEqual:token]) {
      IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(self, expectedTokenType, JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND));
      [operators pushWithId:token];
      expectedTokenType = JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND);
    }
    else if ([@")" isEqual:token]) {
      IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(self, expectedTokenType, JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERATOR));
      while ([operators size] > 0 && ![@"(" isEqual:[operators peek]]) {
        IoCucumberTagexpressionsTagExpressionParser_pushExprWithNSString_withJavaUtilDeque_(self, IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, operators), expressions);
      }
      if ([operators size] == 0) {
        @throw create_IoCucumberTagexpressionsTagExpressionException_initWithNSString_withNSObjectArray_(@"Syntax error. Unmatched )", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
      }
      if ([@"(" isEqual:[operators peek]]) {
        IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, operators);
      }
      expectedTokenType = JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERATOR);
    }
    else {
      IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(self, expectedTokenType, JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERAND));
      IoCucumberTagexpressionsTagExpressionParser_pushExprWithNSString_withJavaUtilDeque_(self, token, expressions);
      expectedTokenType = JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_TokenType, OPERATOR);
    }
  }
  while ([operators size] > 0) {
    if ([@"(" isEqual:[operators peek]]) {
      @throw create_IoCucumberTagexpressionsTagExpressionException_initWithNSString_withNSObjectArray_(@"Syntax error. Unmatched (", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    IoCucumberTagexpressionsTagExpressionParser_pushExprWithNSString_withJavaUtilDeque_(self, IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, operators), expressions);
  }
  return [expressions pop];
}

+ (void)initialize {
  if (self == [IoCucumberTagexpressionsTagExpressionParser class]) {
    JreStrongAssignAndConsume(&IoCucumberTagexpressionsTagExpressionParser_ASSOC, new_IoCucumberTagexpressionsTagExpressionParser_1_init());
    JreStrongAssignAndConsume(&IoCucumberTagexpressionsTagExpressionParser_PREC, new_IoCucumberTagexpressionsTagExpressionParser_2_init());
    J2OBJC_SET_INITIALIZED(IoCucumberTagexpressionsTagExpressionParser)
  }
}

@end

void IoCucumberTagexpressionsTagExpressionParser_init(IoCucumberTagexpressionsTagExpressionParser *self) {
  NSObject_init(self);
}

IoCucumberTagexpressionsTagExpressionParser *new_IoCucumberTagexpressionsTagExpressionParser_init() {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser, init)
}

IoCucumberTagexpressionsTagExpressionParser *create_IoCucumberTagexpressionsTagExpressionParser_init() {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser, init)
}

id<JavaUtilList> IoCucumberTagexpressionsTagExpressionParser_tokenizeWithNSString_(NSString *expr) {
  IoCucumberTagexpressionsTagExpressionParser_initialize();
  id<JavaUtilList> tokens = create_JavaUtilArrayList_init();
  jboolean isEscaped = false;
  JavaLangStringBuilder *token = nil;
  for (jint i = 0; i < [((NSString *) nil_chk(expr)) java_length]; i++) {
    jchar c = [expr charAtWithInt:i];
    if (IoCucumberTagexpressionsTagExpressionParser_ESCAPING_CHAR == c) {
      isEscaped = true;
    }
    else {
      if (JavaLangCharacter_isWhitespaceWithChar_(c)) {
        if (nil != token) {
          [tokens addWithId:[token description]];
          token = nil;
        }
      }
      else {
        switch (c) {
          case '(':
          case ')':
          if (!isEscaped) {
            if (nil != token) {
              [tokens addWithId:[token description]];
              token = nil;
            }
            [tokens addWithId:NSString_java_valueOfChar_(c)];
            break;
          }
          default:
          if (nil == token) {
            token = create_JavaLangStringBuilder_init();
          }
          [token appendWithChar:c];
          break;
        }
      }
      isEscaped = false;
    }
  }
  if (nil != token) {
    [tokens addWithId:[token description]];
  }
  return tokens;
}

void IoCucumberTagexpressionsTagExpressionParser_checkWithIoCucumberTagexpressionsTagExpressionParser_TokenType_withIoCucumberTagexpressionsTagExpressionParser_TokenType_(IoCucumberTagexpressionsTagExpressionParser *self, IoCucumberTagexpressionsTagExpressionParser_TokenType *expectedTokenType, IoCucumberTagexpressionsTagExpressionParser_TokenType *tokenType) {
  if (expectedTokenType != tokenType) {
    @throw create_IoCucumberTagexpressionsTagExpressionException_initWithNSString_withNSObjectArray_(@"Syntax error. Expected %s", [IOSObjectArray arrayWithObjects:(id[]){ [((NSString *) nil_chk([((IoCucumberTagexpressionsTagExpressionParser_TokenType *) nil_chk(expectedTokenType)) description])) lowercaseString] } count:1 type:NSObject_class_()]);
  }
}

id IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(IoCucumberTagexpressionsTagExpressionParser *self, id<JavaUtilDeque> stack) {
  if ([((id<JavaUtilDeque>) nil_chk(stack)) isEmpty]) @throw create_IoCucumberTagexpressionsTagExpressionException_initWithNSString_withNSObjectArray_(@"empty stack", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  return [stack pop];
}

void IoCucumberTagexpressionsTagExpressionParser_pushExprWithNSString_withJavaUtilDeque_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token, id<JavaUtilDeque> stack) {
  {
    id<IoCucumberTagexpressionsExpression> rightAndExpr;
    id<IoCucumberTagexpressionsExpression> rightOrExpr;
    switch (JreIndexOfStr(token, (id[]){ @"and", @"or", @"not" }, 3)) {
      case 0:
      rightAndExpr = IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, stack);
      [((id<JavaUtilDeque>) nil_chk(stack)) pushWithId:create_IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(self, IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, stack), rightAndExpr)];
      break;
      case 1:
      rightOrExpr = IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, stack);
      [((id<JavaUtilDeque>) nil_chk(stack)) pushWithId:create_IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(self, IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, stack), rightOrExpr)];
      break;
      case 2:
      [((id<JavaUtilDeque>) nil_chk(stack)) pushWithId:create_IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(self, IoCucumberTagexpressionsTagExpressionParser_popWithJavaUtilDeque_(self, stack))];
      break;
      default:
      [((id<JavaUtilDeque>) nil_chk(stack)) pushWithId:create_IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(self, token)];
      break;
    }
  }
}

jboolean IoCucumberTagexpressionsTagExpressionParser_isUnaryWithNSString_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token) {
  return [@"not" isEqual:token];
}

jboolean IoCucumberTagexpressionsTagExpressionParser_isBinaryWithNSString_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token) {
  return [@"or" isEqual:token] || [@"and" isEqual:token];
}

jboolean IoCucumberTagexpressionsTagExpressionParser_isOperatorWithNSString_(IoCucumberTagexpressionsTagExpressionParser *self, NSString *token) {
  return [((id<JavaUtilMap>) nil_chk(IoCucumberTagexpressionsTagExpressionParser_ASSOC)) getWithId:token] != nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser)

@implementation IoCucumberTagexpressionsTagExpressionParser_1

@end

void IoCucumberTagexpressionsTagExpressionParser_1_init(IoCucumberTagexpressionsTagExpressionParser_1 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:@"or" withId:JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_Assoc, LEFT)];
    [self putWithId:@"and" withId:JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_Assoc, LEFT)];
    [self putWithId:@"not" withId:JreLoadEnum(IoCucumberTagexpressionsTagExpressionParser_Assoc, RIGHT)];
  }
}

IoCucumberTagexpressionsTagExpressionParser_1 *new_IoCucumberTagexpressionsTagExpressionParser_1_init() {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_1, init)
}

IoCucumberTagexpressionsTagExpressionParser_1 *create_IoCucumberTagexpressionsTagExpressionParser_1_init() {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_1, init)
}

@implementation IoCucumberTagexpressionsTagExpressionParser_2

@end

void IoCucumberTagexpressionsTagExpressionParser_2_init(IoCucumberTagexpressionsTagExpressionParser_2 *self) {
  JavaUtilHashMap_init(self);
  {
    [self putWithId:@"(" withId:JavaLangInteger_valueOfWithInt_(-2)];
    [self putWithId:@")" withId:JavaLangInteger_valueOfWithInt_(-1)];
    [self putWithId:@"or" withId:JavaLangInteger_valueOfWithInt_(0)];
    [self putWithId:@"and" withId:JavaLangInteger_valueOfWithInt_(1)];
    [self putWithId:@"not" withId:JavaLangInteger_valueOfWithInt_(2)];
  }
}

IoCucumberTagexpressionsTagExpressionParser_2 *new_IoCucumberTagexpressionsTagExpressionParser_2_init() {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_2, init)
}

IoCucumberTagexpressionsTagExpressionParser_2 *create_IoCucumberTagexpressionsTagExpressionParser_2_init() {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_2, init)
}

J2OBJC_INITIALIZED_DEFN(IoCucumberTagexpressionsTagExpressionParser_TokenType)

IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_values_[2];

@implementation IoCucumberTagexpressionsTagExpressionParser_TokenType

+ (void)initialize {
  if (self == [IoCucumberTagexpressionsTagExpressionParser_TokenType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"OPERAND", @"OPERATOR",
    };
    for (jint i = 0; i < 2; i++) {
      (IoCucumberTagexpressionsTagExpressionParser_TokenType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      IoCucumberTagexpressionsTagExpressionParser_TokenType_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(IoCucumberTagexpressionsTagExpressionParser_TokenType)
  }
}

@end

void IoCucumberTagexpressionsTagExpressionParser_TokenType_initWithNSString_withInt_(IoCucumberTagexpressionsTagExpressionParser_TokenType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *IoCucumberTagexpressionsTagExpressionParser_TokenType_values() {
  IoCucumberTagexpressionsTagExpressionParser_TokenType_initialize();
  return [IOSObjectArray arrayWithObjects:IoCucumberTagexpressionsTagExpressionParser_TokenType_values_ count:2 type:IoCucumberTagexpressionsTagExpressionParser_TokenType_class_()];
}

IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_valueOfWithNSString_(NSString *name) {
  IoCucumberTagexpressionsTagExpressionParser_TokenType_initialize();
  for (int i = 0; i < 2; i++) {
    IoCucumberTagexpressionsTagExpressionParser_TokenType *e = IoCucumberTagexpressionsTagExpressionParser_TokenType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

IoCucumberTagexpressionsTagExpressionParser_TokenType *IoCucumberTagexpressionsTagExpressionParser_TokenType_fromOrdinal(NSUInteger ordinal) {
  IoCucumberTagexpressionsTagExpressionParser_TokenType_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return IoCucumberTagexpressionsTagExpressionParser_TokenType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_TokenType)

J2OBJC_INITIALIZED_DEFN(IoCucumberTagexpressionsTagExpressionParser_Assoc)

IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_values_[2];

@implementation IoCucumberTagexpressionsTagExpressionParser_Assoc

+ (void)initialize {
  if (self == [IoCucumberTagexpressionsTagExpressionParser_Assoc class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"LEFT", @"RIGHT",
    };
    for (jint i = 0; i < 2; i++) {
      (IoCucumberTagexpressionsTagExpressionParser_Assoc_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      IoCucumberTagexpressionsTagExpressionParser_Assoc_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(IoCucumberTagexpressionsTagExpressionParser_Assoc)
  }
}

@end

void IoCucumberTagexpressionsTagExpressionParser_Assoc_initWithNSString_withInt_(IoCucumberTagexpressionsTagExpressionParser_Assoc *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *IoCucumberTagexpressionsTagExpressionParser_Assoc_values() {
  IoCucumberTagexpressionsTagExpressionParser_Assoc_initialize();
  return [IOSObjectArray arrayWithObjects:IoCucumberTagexpressionsTagExpressionParser_Assoc_values_ count:2 type:IoCucumberTagexpressionsTagExpressionParser_Assoc_class_()];
}

IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_valueOfWithNSString_(NSString *name) {
  IoCucumberTagexpressionsTagExpressionParser_Assoc_initialize();
  for (int i = 0; i < 2; i++) {
    IoCucumberTagexpressionsTagExpressionParser_Assoc *e = IoCucumberTagexpressionsTagExpressionParser_Assoc_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

IoCucumberTagexpressionsTagExpressionParser_Assoc *IoCucumberTagexpressionsTagExpressionParser_Assoc_fromOrdinal(NSUInteger ordinal) {
  IoCucumberTagexpressionsTagExpressionParser_Assoc_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return IoCucumberTagexpressionsTagExpressionParser_Assoc_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_Assoc)

@implementation IoCucumberTagexpressionsTagExpressionParser_Literal

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables {
  return [((id<JavaUtilList>) nil_chk(variables)) containsWithId:value_];
}

- (NSString *)description {
  return [((NSString *) nil_chk([((NSString *) nil_chk(value_)) java_replaceAll:@"\\(" withReplacement:@"\\\\("])) java_replaceAll:@"\\)" withReplacement:@"\\\\)"];
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

@end

void IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(IoCucumberTagexpressionsTagExpressionParser_Literal *self, IoCucumberTagexpressionsTagExpressionParser *outer$, NSString *value) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, value);
}

IoCucumberTagexpressionsTagExpressionParser_Literal *new_IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(IoCucumberTagexpressionsTagExpressionParser *outer$, NSString *value) {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_Literal, initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_, outer$, value)
}

IoCucumberTagexpressionsTagExpressionParser_Literal *create_IoCucumberTagexpressionsTagExpressionParser_Literal_initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_(IoCucumberTagexpressionsTagExpressionParser *outer$, NSString *value) {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_Literal, initWithIoCucumberTagexpressionsTagExpressionParser_withNSString_, outer$, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_Literal)

@implementation IoCucumberTagexpressionsTagExpressionParser_Or

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables {
  return [((id<IoCucumberTagexpressionsExpression>) nil_chk(left_)) evaluateWithJavaUtilList:variables] || [((id<IoCucumberTagexpressionsExpression>) nil_chk(right_)) evaluateWithJavaUtilList:variables];
}

- (NSString *)description {
  return JreStrcat("$$$$$", @"( ", [((id<IoCucumberTagexpressionsExpression>) nil_chk(left_)) description], @" or ", [((id<IoCucumberTagexpressionsExpression>) nil_chk(right_)) description], @" )");
}

- (void)dealloc {
  RELEASE_(left_);
  RELEASE_(right_);
  [super dealloc];
}

@end

void IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser_Or *self, IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) {
  NSObject_init(self);
  JreStrongAssign(&self->left_, left);
  JreStrongAssign(&self->right_, right);
}

IoCucumberTagexpressionsTagExpressionParser_Or *new_IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_Or, initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_, outer$, left, right)
}

IoCucumberTagexpressionsTagExpressionParser_Or *create_IoCucumberTagexpressionsTagExpressionParser_Or_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_Or, initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_, outer$, left, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_Or)

@implementation IoCucumberTagexpressionsTagExpressionParser_And

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables {
  return [((id<IoCucumberTagexpressionsExpression>) nil_chk(left_)) evaluateWithJavaUtilList:variables] && [((id<IoCucumberTagexpressionsExpression>) nil_chk(right_)) evaluateWithJavaUtilList:variables];
}

- (NSString *)description {
  return JreStrcat("$$$$$", @"( ", [((id<IoCucumberTagexpressionsExpression>) nil_chk(left_)) description], @" and ", [((id<IoCucumberTagexpressionsExpression>) nil_chk(right_)) description], @" )");
}

- (void)dealloc {
  RELEASE_(left_);
  RELEASE_(right_);
  [super dealloc];
}

@end

void IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser_And *self, IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) {
  NSObject_init(self);
  JreStrongAssign(&self->left_, left);
  JreStrongAssign(&self->right_, right);
}

IoCucumberTagexpressionsTagExpressionParser_And *new_IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_And, initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_, outer$, left, right)
}

IoCucumberTagexpressionsTagExpressionParser_And *create_IoCucumberTagexpressionsTagExpressionParser_And_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> left, id<IoCucumberTagexpressionsExpression> right) {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_And, initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_withIoCucumberTagexpressionsExpression_, outer$, left, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_And)

@implementation IoCucumberTagexpressionsTagExpressionParser_Not

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables {
  return ![((id<IoCucumberTagexpressionsExpression>) nil_chk(expr_)) evaluateWithJavaUtilList:variables];
}

- (NSString *)description {
  return JreStrcat("$$$", @"not ( ", [((id<IoCucumberTagexpressionsExpression>) nil_chk(expr_)) description], @" )");
}

- (void)dealloc {
  RELEASE_(expr_);
  [super dealloc];
}

@end

void IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser_Not *self, IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> expr) {
  NSObject_init(self);
  JreStrongAssign(&self->expr_, expr);
}

IoCucumberTagexpressionsTagExpressionParser_Not *new_IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> expr) {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_Not, initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_, outer$, expr)
}

IoCucumberTagexpressionsTagExpressionParser_Not *create_IoCucumberTagexpressionsTagExpressionParser_Not_initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_(IoCucumberTagexpressionsTagExpressionParser *outer$, id<IoCucumberTagexpressionsExpression> expr) {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_Not, initWithIoCucumberTagexpressionsTagExpressionParser_withIoCucumberTagexpressionsExpression_, outer$, expr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_Not)

@implementation IoCucumberTagexpressionsTagExpressionParser_True

- (jboolean)evaluateWithJavaUtilList:(id<JavaUtilList>)variables {
  return true;
}

@end

void IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(IoCucumberTagexpressionsTagExpressionParser_True *self, IoCucumberTagexpressionsTagExpressionParser *outer$) {
  NSObject_init(self);
}

IoCucumberTagexpressionsTagExpressionParser_True *new_IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(IoCucumberTagexpressionsTagExpressionParser *outer$) {
  J2OBJC_NEW_IMPL(IoCucumberTagexpressionsTagExpressionParser_True, initWithIoCucumberTagexpressionsTagExpressionParser_, outer$)
}

IoCucumberTagexpressionsTagExpressionParser_True *create_IoCucumberTagexpressionsTagExpressionParser_True_initWithIoCucumberTagexpressionsTagExpressionParser_(IoCucumberTagexpressionsTagExpressionParser *outer$) {
  J2OBJC_CREATE_IMPL(IoCucumberTagexpressionsTagExpressionParser_True, initWithIoCucumberTagexpressionsTagExpressionParser_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberTagexpressionsTagExpressionParser_True)
